webpackJsonp([1],{

/***/ 206:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
var ReactDOM = __webpack_require__(69);
var React = __webpack_require__(16);
var ProjectsListContainer_1 = __webpack_require__(212);
ReactDOM.render(React.createElement(ProjectsListContainer_1["default"], null), document.getElementById('react-root'));
if (true) {
    module.hot.accept();
}

/***/ }),

/***/ 210:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = __webpack_require__(16);
__webpack_require__(226);
var Button_1 = __webpack_require__(70);
var EmptyListWarning = function (_super) {
    __extends(EmptyListWarning, _super);
    function EmptyListWarning() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.paths = {
            createProjectUrl: '/Projects/Add',
            createProjectLogo: ''
        };
        return _this;
    }
    EmptyListWarning.prototype.render = function () {
        return React.createElement("section", { className: 'EmptyListWarning' }, React.createElement("img", { className: 'center-block', src: '/images/List.png' }), React.createElement("section", { className: 'EmptyListWarning-textContainer' }, React.createElement("p", { className: 'text-center' }, "It looks like you don't have any projects created."), React.createElement("p", { className: 'text-center' }, React.createElement(Button_1["default"], { link: true, href: this.paths.createProjectUrl, extraClassNames: ['btn-success'] }, "Create first project"))));
    };
    return EmptyListWarning;
}(React.Component);
exports.__esModule = true;
exports["default"] = EmptyListWarning;

/***/ }),

/***/ 211:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = __webpack_require__(16);
var moment = __webpack_require__(0);
__webpack_require__(227);
var ProjectsListItem = function (_super) {
    __extends(ProjectsListItem, _super);
    function ProjectsListItem() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ProjectsListItem.prototype.render = function () {
        return React.createElement("section", { className: 'ProjectsListItem' }, React.createElement("p", { className: 'ProjectsListItem-date' }, React.createElement("span", { className: 'glyphicon glyphicon-calendar' }), " ", moment(this.props.project.CreationDate).format('DD-MM-YYYY')), React.createElement("p", null, this.props.project.Name), React.createElement("p", null, this.props.project.Description));
    };
    return ProjectsListItem;
}(React.Component);
exports.__esModule = true;
exports["default"] = ProjectsListItem;

/***/ }),

/***/ 212:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = __webpack_require__(16);
var ProjectsList_1 = __webpack_require__(213);
var EmptyListWarning_1 = __webpack_require__(210);
var ProjectsListContainer = function (_super) {
    __extends(ProjectsListContainer, _super);
    function ProjectsListContainer() {
        return _super.call(this) || this;
    }
    ProjectsListContainer.prototype.componentWillMount = function () {
        this.setState(function (state, props) {
            state.projects = [];
        });
    };
    ProjectsListContainer.prototype.render = function () {
        var hasProjects = this.state.projects.length > 0;
        return hasProjects ? React.createElement(ProjectsList_1["default"], { projects: this.state.projects }) : React.createElement(EmptyListWarning_1["default"], null);
    };
    return ProjectsListContainer;
}(React.Component);
exports.__esModule = true;
exports["default"] = ProjectsListContainer;

/***/ }),

/***/ 213:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = __webpack_require__(16);
__webpack_require__(228);
__webpack_require__(229);
var ProjectListItem_1 = __webpack_require__(211);
var Button_1 = __webpack_require__(70);
var ProjectsList = function (_super) {
    __extends(ProjectsList, _super);
    function ProjectsList() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.paths = {
            createProjectUrl: '/Projects/Add'
        };
        return _this;
    }
    ProjectsList.prototype.render = function () {
        return React.createElement("section", { className: 'ProjectsList row' }, React.createElement("div", { className: 'col-md-8 col-md-push-2' }, React.createElement("div", { className: 'ProjectsList-summary row' }, React.createElement("div", { className: 'col-md-6 padding-none' }, React.createElement("p", { className: 'ProjectList-summaryText' }, "Number of projects: ", React.createElement("strong", null, this.props.projects.length))), React.createElement("div", { className: 'col-md-6 padding-none' }, React.createElement(Button_1["default"], { link: true, href: this.paths.createProjectUrl, extraClassNames: ['btn-success', 'pull-right'] }, "Start new project"))), React.createElement("div", { className: 'ProjectsList-content row' }, this.props.projects.map(function (project) {
            return React.createElement(ProjectListItem_1["default"], { key: project.Id, project: project });
        }))));
    };
    return ProjectsList;
}(React.Component);
exports.__esModule = true;
exports["default"] = ProjectsList;

/***/ }),

/***/ 226:
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ 227:
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ 228:
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ 229:
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ 328:
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(20);
module.exports = __webpack_require__(206);


/***/ }),

/***/ 70:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __extends = undefined && undefined.__extends || function (d, b) {
    for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
    }function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = __webpack_require__(16);
var Button = function (_super) {
    __extends(Button, _super);
    function Button() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Button.prototype.render = function () {
        var classNames = ['btn'].concat(this.props.extraClassNames).join(' ');
        if (this.props.link) {
            return React.createElement("a", { className: classNames, href: this.props.href }, this.props.children);
        } else {
            return React.createElement("button", { className: classNames }, this.props.children);
        }
    };
    return Button;
}(React.Component);
exports.__esModule = true;
exports["default"] = Button;

/***/ })

},[328]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,